name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
          - os: macos-latest
            arch: amd64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: amd64
          - os: windows-latest
            arch: arm64

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get install -y cmake g++
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install cmake
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install mingw --force
          echo "CMAKE_C_COMPILER=/mingw64/bin/gcc.exe" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER=/mingw64/bin/g++.exe" >> $GITHUB_ENV
        fi

    - name: Configure CMake
      shell: bash
      run: |
        mkdir build
        cd build
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "/mingw64/bin" >> $GITHUB_PATH
          cmake .. -G "MinGW Makefiles"
        else
          cmake ..
        fi

    - name: Build
      shell: bash
      run: |
        cd build
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          mingw32-make
        else
          make
        fi

    - name: Install dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install 7zip.install
        fi

    - name: Package binary
      shell: bash
      run: |
        mkdir package
        mv build/Ordering package/
        cp example_data/order_info.txt package/
        cp example_data/dish_info.txt package/
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          7z a -tzip ${{ matrix.os }}-${{ matrix.arch }}-binary.zip package/*
        else
          zip -r ${{ matrix.os }}-${{ matrix.arch }}-binary.zip package/*
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-binary
        path: ./${{ matrix.os }}-${{ matrix.arch }}-binary.zip

  package-source:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: sudo apt-get install -y cmake g++

    - name: Configure CMake
      shell: bash
      run: |
        mkdir build
        cd build
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cmake .. -G "MinGW Makefiles" -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=/mingw64/bin/g++.exe
        else
          cmake ..
        fi

    - name: Package source
      run: |
        cd build
        sudo cpack --config CPackSourceConfig.cmake
        sudo mv package/Ordering-*-Source.tar.gz ..

    - name: Upload source artifact
      uses: actions/upload-artifact@v3
      with:
        name: source-package
        path: ./*.tar.gz

  release:
    needs: [build, package-source]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Get latest release
      id: latest_release
      run: |
        LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
        if [[ "$LATEST_RELEASE" == "null" ]]; then
          LATEST_RELEASE="1.0.0"
        fi
        echo "::set-output name=version::${LATEST_RELEASE}"
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    - name: Increment version
      id: increment_version
      run: |
        LATEST_RELEASE=${{ steps.latest_release.outputs.version }}
        VERSION=$(echo $LATEST_RELEASE | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
        echo "::set-output name=version::${VERSION}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: ${{ steps.increment_version.outputs.version }}
        release_name: Release ${{ steps.increment_version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload ubuntu-latest-amd64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ubuntu-latest-amd64-binary/ubuntu-latest-amd64-binary.zip
        asset_name: ubuntu-latest-amd64-binary.zip
        asset_content_type: application/zip

    - name: Upload ubuntu-latest-arm64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/ubuntu-latest-arm64-binary/ubuntu-latest-arm64-binary.zip
        asset_name: ubuntu-latest-arm64-binary.zip
        asset_content_type: application/zip

    - name: Upload macos-latest-amd64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos-latest-amd64-binary/macos-latest-amd64-binary.zip
        asset_name: macos-latest-amd64-binary.zip
        asset_content_type: application/zip

    - name: Upload macos-latest-arm64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos-latest-arm64-binary/macos-latest-arm64-binary.zip
        asset_name: macos-latest-arm64-binary.zip
        asset_content_type: application/zip

    - name: Upload windows-latest-amd64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows-latest-amd64-binary/windows-latest-amd64-binary.zip
        asset_name: windows-latest-amd64-binary.zip
        asset_content_type: application/zip

    - name: Upload windows-latest-arm64-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows-latest-arm64-binary/windows-latest-arm64-binary.zip
        asset_name: windows-latest-arm64-binary.zip
        asset_content_type: application/zip

    - name: Find source package
      id: find_source_package
      run: |
        SOURCE_PACKAGE_PATH=$(find artifacts -name "*.tar.gz")
        echo "::set-output name=path::${SOURCE_PACKAGE_PATH}"

    - name: Upload source-package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_source_package.outputs.path }}
        asset_name: source-package.tar.gz
        asset_content_type: application/gzip